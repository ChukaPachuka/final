import configparser
import os
import pandas as pd
import psycopg2
import numpy as np
from scipy import stats
from statsmodels.stats.proportion import proportions_ztest
import matplotlib.pyplot as plt
import seaborn as sns

# –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
config_path = os.path.join(BASE_DIR, "config.ini")

# –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = configparser.ConfigParser()
config.read(config_path)

# –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
DB_CONFIG = {
    "dbname": config["database"]["dbname"],
    "user": config["database"]["user"],
    "password": config["database"]["password"],
    "host": config["database"]["host"],
    "port": config["database"]["port"]
}

print("\nüü¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
print(DB_CONFIG) # –≤—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
# DB_CONFIG = {
    # "dbname": "marketplace",
    # "user": "postgres",
    # "password": "postgres",
    # "host": "158.160.166.108",
    # "port": "5433"
# }

# SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 2024 –≥–æ–¥
query = """
SELECT 
    sale_id, client_id, gender, purchase_datetime, purchase_time_seconds, 
    product_id, quantity, price_per_item, discount_per_item, total_price
FROM sales
WHERE purchase_datetime BETWEEN '2024-01-01' AND '2024-12-31';
"""

# –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ dataframe
conn = psycopg2.connect(**DB_CONFIG)
df = pd.read_sql(query, conn)
conn.close()

# –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ datetime
df["purchase_datetime"] = pd.to_datetime(df["purchase_datetime"])
df["month"] = df["purchase_datetime"].dt.to_period("M")  # –º–µ—Å—è—Ü
df["day"] = df["purchase_datetime"].dt.to_period("D")    # –¥–µ–Ω—å
df["week"] = df["purchase_datetime"].dt.to_period("W")   # –Ω–µ–¥–µ–ª—è

# –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–∞–¥—É –º–µ—Å—è—Ü–∞
df["decade"] = pd.cut(df["purchase_datetime"].dt.day, bins=[1, 10, 20, 31], labels=["1-10", "11-20", "21+"])

# 1. –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂
total_sales = df["total_price"].sum()
print(f"üü¢ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {total_sales:,.2f} —Ä—É–±.")

# 2. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
total_orders = df["sale_id"].nunique()
print(f"üü¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}")

# 3. –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
avg_order_value = df["total_price"].mean()
print(f"üü¢ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {avg_order_value:,.2f} —Ä—É–±.")

# 4. –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
avg_items_per_order = df["quantity"].mean()
print(f"üü¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ: {avg_items_per_order:.2f}")

# 5. –í—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å
daily_sales = df.groupby("day")["total_price"].sum()
print(f"\nüü¢ –°—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {daily_sales.mean():,.2f} —Ä—É–±.")

# 6. –í—ã—Ä—É—á–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
weekly_sales = df.groupby("week")["total_price"].sum()
print(f"üü¢ –°—Ä–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {weekly_sales.mean():,.2f} —Ä—É–±.")

# 7. –í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü
monthly_sales = df.groupby("month")["total_price"].sum()
print(f"üü¢ –°—Ä–µ–¥–Ω—è—è –º–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {monthly_sales.mean():,.2f} —Ä—É–±.")

# 8. DAU (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å)
dau = df.groupby("day")["client_id"].nunique().mean()
print(f"\nüü¢ –°—Ä–µ–¥–Ω–µ–µ DAU: {dau:.2f}")

# 9. MAU (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –º–µ—Å—è—Ü)
mau = df.groupby("month")["client_id"].nunique().mean()
print(f"üü¢ –°—Ä–µ–¥–Ω–µ–µ MAU: {mau:.2f}")

# 10. WAU (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –Ω–µ–¥–µ–ª—é)
wau = df.groupby("week")["client_id"].nunique().mean()
print(f"üü¢ –°—Ä–µ–¥–Ω–µ–µ WAU: {wau:.2f}")

# Rolling Retention 30 –¥–Ω–µ–π
# –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
df["purchase_datetime"] = pd.to_datetime(df["purchase_datetime"])
df["cohort"] = df.groupby("client_id")["purchase_datetime"].transform("min").dt.to_period("M")

# —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö –æ—Ç –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏
df["days_since_first"] = (df["purchase_datetime"] - df.groupby("client_id")["purchase_datetime"].transform("min")).dt.days

# –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º –∏ —Å—á–∏—Ç–∞–µ–º rolling retention
rolling_retention = df.groupby(["cohort", "days_since_first"])["client_id"].nunique().unstack(fill_value=0)

# —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–¥–µ—Ä–∂–∞–Ω–∏–µ
cohort_sizes = rolling_retention.iloc[:, 0]  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ 0 –¥–µ–Ω—å (–ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø–æ–∫—É–ø–∫–∏)
retention_rates = rolling_retention.divide(cohort_sizes, axis=0) * 100

# –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –¥–Ω–∏ (0, 1, 7, 14, 30, 60, 90)
retention_rates = retention_rates[[0, 1, 7, 14, 30, 60, 90]]

# –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print("üü¢ Rolling Retention –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º (0, 1, 7, 14, 30, 60, 90 –¥–Ω–µ–π):")
print(retention_rates.round(2))

# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
plt.figure(figsize=(12, 6))
sns.heatmap(retention_rates, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Rolling Retention –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º (0, 1, 3, 7, 14, 30, 60, 90 –¥–Ω–µ–π)")
plt.xlabel("–î–µ–Ω—å —Å –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏")
plt.ylabel("–ö–æ–≥–æ—Ä—Ç–∞ (–º–µ—Å—è—Ü)")
plt.show()

# 12. LTV = (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫) * (—Å—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞ –ø–æ–∫—É–ø–æ–∫) * (—Å—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞)
purchase_freq = df.groupby("client_id")["sale_id"].count().mean()
customer_lifetime = (df.groupby("client_id")["purchase_datetime"].max() - df.groupby("client_id")["purchase_datetime"].min()).dt.days.mean()

ltv = avg_order_value * purchase_freq * (customer_lifetime / 30)  # –≤ –º–µ—Å—è—Ü–∞—Ö
print(f"üü¢ –°—Ä–µ–¥–Ω–∏–π LTV: {ltv:,.2f} —Ä—É–±.")

# 13. –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º
print("\nüü¢ –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º:")
print(daily_sales)

# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
plt.figure(figsize=(12, 5))
daily_sales.plot(kind='line', marker='o', linestyle='-')
plt.title("–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º")
plt.xlabel("–î–∞—Ç–∞")
plt.ylabel("–í—ã—Ä—É—á–∫–∞ RUB")
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

# 14. –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º
print("üü¢ –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º:")
print(monthly_sales)

# –≤–∏–∑—É–ª–∏–∑–∞—Ü–∏—è
monthly_sales.plot(kind='bar', figsize=(12, 5), color='skyblue', edgecolor='black')
plt.title("–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º")
plt.xlabel("–ú–µ—Å—è—Ü")
plt.ylabel("–í—ã—Ä—É—á–∫–∞ RUB")
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.show()

# 15. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
monthly_orders = df.groupby("month")["sale_id"].count()
print("üü¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º:")
print(monthly_orders)

# 16. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–µ–∫–∞–¥–∞–º –º–µ—Å—è—Ü–∞
decade_orders = df.groupby("decade")["sale_id"].count()
print("üü¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–µ–∫–∞–¥–∞–º –º–µ—Å—è—Ü–∞:")
print(decade_orders)

# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
decade_orders.plot(kind='bar', figsize=(10, 5), color=['#ff9999','#66b3ff','#99ff99'])
plt.title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–µ–∫–∞–¥–∞–º –º–µ—Å—è—Ü–∞")
plt.xlabel("–î–µ–∫–∞–¥–∞ –º–µ—Å—è—Ü–∞")
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤")
plt.xticks(rotation=0)
plt.grid(axis='y')
plt.show()

# 17. –¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—É–º–º–µ –ø—Ä–æ–¥–∞–∂
top_products = df.groupby("product_id")["total_price"].sum().nlargest(10)
print("\nüü¢ –¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ:")
print(top_products)

# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
top_products.plot(kind='barh', figsize=(10, 5), color='lightcoral', edgecolor='black')
plt.title("–¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ")
plt.xlabel("–í—ã—Ä—É—á–∫–∞ RUB")
plt.ylabel("ID —Ç–æ–≤–∞—Ä–∞")
plt.grid(axis='x')
plt.gca().invert_yaxis()
plt.show()

# 18. –¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏
low_products = df.groupby("product_id")["total_price"].sum().nsmallest(5)
print("üü¢ –¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏:")
print(low_products)

# 19. –¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ –∑–∞–∫–∞–∑–æ–≤
top_clients = df.groupby("client_id")["total_price"].sum().nlargest(10)
print("üü¢ –¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ –∑–∞–∫–∞–∑–æ–≤:")
print(top_clients)

# 20. –ú–∞—Ç—Ä–∏—Ü–∞ –≤—ã—Ä—É—á–∫–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º —Å–∫–∏–¥–æ–∫
df["discount_percent"] = (df["discount_per_item"] / df["price_per_item"]) * 100
df["discount_group"] = pd.cut(df["discount_percent"], bins=[0, 25, 50, 75, 100], labels=["0-25%", "25-50%", "50-75%", "75-100%"])

discount_analysis = df.groupby("discount_group").agg({"total_price": "sum", "sale_id": "count"})
print("\nüü¢ –ê–Ω–∞–ª–∏–∑ —Å–∫–∏–¥–æ–∫ (–≥—Ä—É–ø–ø—ã —Å–∫–∏–¥–æ–∫, —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤):")
print(discount_analysis)

# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
discount_analysis.plot(kind='bar', figsize=(10, 5), color=['#ffcc99','#99ccff'])
plt.title("–í–ª–∏—è–Ω–∏–µ —Å–∫–∏–¥–æ–∫ –Ω–∞ —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂")
plt.xlabel("–°–∫–∏–¥–∫–∞")
plt.ylabel("–í—ã—Ä—É—á–∫–∞ RUB")
plt.xticks(rotation=0)
plt.grid(axis='y')
plt.show()

print("\nüü¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑:")
# 21. –ì–∏–ø–æ—Ç–µ–∑–∞ 1. –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–ª–∏—á–∏—è —Å–∫–∏–¥–∫–∏
# —Ä–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 2 –≥—Ä—É–ø–ø—ã
no_discount = df[df["discount_per_item"] == 0]["quantity"]
with_discount = df[df["discount_per_item"] > 0]["quantity"]

# –ø—Ä–∏–º–µ–Ω—è–µ–º t-—Ç–µ—Å—Ç
test_result = stats.ttest_ind(no_discount, with_discount, equal_var=False)

# –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
print(f"\nüü¢ –ì–∏–ø–æ—Ç–µ–∑–∞ 1. –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–ª–∏—á–∏—è —Å–∫–∏–¥–∫–∏:")
print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã t-—Ç–µ—Å—Ç–∞:")
print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å–∫–∏–¥–∫–∏: {no_discount.mean():.2f}")
print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π: {with_discount.mean():.2f}")
print(f"p-value = {test_result.pvalue:.5f}")

# –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥—ã
if test_result.pvalue < 0.05:
    print("‚úÖ –û–¢–í–ï–†–ì–ê–ï–ú H‚ÇÄ: –¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ –ø—Ä–æ–¥–∞—é—Ç—Å—è –≤ —Å—Ä–µ–¥–Ω–µ–º –≤ –±–æ–ª—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ")
else:
    print("‚ùå –ù–ï –û–¢–í–ï–†–ì–ê–ï–ú H‚ÇÄ: –†–∞–∑–Ω–∏—Ü–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥–∞–∂ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–π")

# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
plt.figure(figsize=(8, 5))
sns.boxplot(data=df, x=df["discount_per_item"] > 0, y="quantity", palette=["#ff9999", "#66b3ff"])
plt.title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ (—Å–æ —Å–∫–∏–¥–∫–æ–π vs –±–µ–∑ —Å–∫–∏–¥–∫–∏)")
plt.xlabel("–ï—Å—Ç—å —Å–∫–∏–¥–∫–∞?")
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤")
plt.xticks([0, 1], ["–ë–µ–∑ —Å–∫–∏–¥–∫–∏", "–°–æ —Å–∫–∏–¥–∫–æ–π"])
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.show()

# 22. –ì–∏–ø–æ—Ç–µ–∑–∞ 2. –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ —á–∞—â–µ –¥–µ–ª–∞—é—Ç –∑–∞–∫–∞–∑—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, —á–µ–º –±–µ–∑ —Å–∫–∏–¥–∫–∏
# —Ä–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–ª–∏—á–∏—é —Å–∫–∏–¥–∫–∏
total_items_no_discount = df[df["discount_per_item"] == 0]["quantity"].sum()  # –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å–∫–∏–¥–∫–∏
total_items_with_discount = df[df["discount_per_item"] > 0]["quantity"].sum()  # –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π

# –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
total_items = total_items_no_discount + total_items_with_discount

# –¥–æ–ª–∏ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
p1 = total_items_with_discount / total_items  # –¥–æ–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Å–æ —Å–∫–∏–¥–∫–æ–π
p2 = total_items_no_discount / total_items  # –¥–æ–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Å–∫–∏–¥–∫–∏

# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
counts = np.array([total_items_with_discount, total_items_no_discount])
nobs = np.array([total_items, total_items])

# –ø—Ä–∏–º–µ–Ω—è–µ–º z-—Ç–µ—Å—Ç
z_stat, p_value = proportions_ztest(counts, nobs, alternative='larger')

# –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
print(f"\nüü¢ –ì–∏–ø–æ—Ç–µ–∑–∞ 2. –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ —á–∞—â–µ –¥–µ–ª–∞—é—Ç –∑–∞–∫–∞–∑—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, —á–µ–º –±–µ–∑ —Å–∫–∏–¥–∫–∏:")
print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã z-—Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π:")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å–∫–∏–¥–∫–∏: {total_items_no_discount}")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π: {total_items_with_discount}")
print(f"–î–æ–ª—è –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π: {p1:.4f}")
print(f"–î–æ–ª—è –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å–∫–∏–¥–∫–∏: {p2:.4f}")
print(f"z-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {z_stat:.4f}")
print(f"p-value = {p_value:.5f}")

# –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥—ã
if p_value < 0.05:
    print("‚úÖ –û–¢–í–ï–†–ì–ê–ï–ú H‚ÇÄ: –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ —á–∞—â–µ –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π")
else:
    print("‚ùå –ù–ï –û–¢–í–ï–†–ì–ê–ï–ú H‚ÇÄ: –†–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å—Ç–æ—Ç–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–π")

# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
discount_counts = df["discount_per_item"].gt(0).value_counts()

plt.figure(figsize=(6, 6))
plt.pie(discount_counts, labels=["–ë–µ–∑ —Å–∫–∏–¥–∫–∏", "–°–æ —Å–∫–∏–¥–∫–æ–π"], autopct="%1.1f%%", colors=["#ff9999", "#66b3ff"], startangle=90)
plt.title("–î–æ–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π")
plt.show()

# 23. –ì–∏–ø–æ—Ç–µ–∑–∞ 3. –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ –Ω–∏–∂–µ —É —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–æ–π
# –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∏–∞–Ω–Ω—É—é —Ü–µ–Ω—É
median_price = df["price_per_item"].median()

# —Ä–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ 2 –≥—Ä—É–ø–ø—ã
low_price_group = df[df["price_per_item"] <= median_price]["quantity"]
high_price_group = df[df["price_per_item"] > median_price]["quantity"]

# –ø—Ä–∏–º–µ–Ω—è–µ–º t-—Ç–µ—Å—Ç
test_result = stats.ttest_ind(low_price_group, high_price_group, equal_var=False)

# –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
print(f"\nüü¢ –ì–∏–ø–æ—Ç–µ–∑–∞ 3. –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ –Ω–∏–∂–µ —É —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–æ–π:")
print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã t-—Ç–µ—Å—Ç–∞:")
print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–¥–µ—à—ë–≤—ã–µ —Ç–æ–≤–∞—Ä—ã): {low_price_group.mean():.2f}")
print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–¥–æ—Ä–æ–≥–∏–µ —Ç–æ–≤–∞—Ä—ã): {high_price_group.mean():.2f}")
print(f"p-value = {test_result.pvalue:.5f}")

# –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥—ã
if test_result.pvalue < 0.05:
    print("‚úÖ –û–¢–í–ï–†–ì–ê–ï–ú H‚ÇÄ: –î–æ—Ä–æ–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–∞—é—Ç—Å—è –≤ –º–µ–Ω—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ")
else:
    print("‚ùå –ù–ï –û–¢–í–ï–†–ì–ê–ï–ú H‚ÇÄ: –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö –¥–µ—à—ë–≤—ã—Ö –∏ –¥–æ—Ä–æ–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–π")

# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
plt.figure(figsize=(8, 5))
sns.boxplot(data=df, x=df["price_per_item"] > df["price_per_item"].median(), y="quantity", palette=["#ffcc99", "#99ccff"])
plt.title("–ü—Ä–æ–¥–∞–∂–∏: –¥–æ—Ä–æ–≥–∏–µ vs –¥–µ—à–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã")
plt.xlabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞")
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü")
plt.xticks([0, 1], ["–î–µ—à–µ–≤—ã–µ", "–î–æ—Ä–æ–≥–∏–µ"])
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.show()

# 24. –ì–∏–ø–æ—Ç–µ–∑–∞ 4. –ñ–µ–Ω—â–∏–Ω—ã —Å–æ–≤–µ—Ä—à–∞—é—Ç –ø–æ–∫—É–ø–∫–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –±–æ–ª—å—à—É—é —Å—É–º–º—É, —á–µ–º –º—É–∂—á–∏–Ω—ã
# —Ä–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—É
male_total_price = df[df["gender"] == "M"]["total_price"]
female_total_price = df[df["gender"] == "F"]["total_price"]

# –ø—Ä–∏–º–µ–Ω—è–µ–º t-—Ç–µ—Å—Ç
test_result = stats.ttest_ind(female_total_price, male_total_price, equal_var=False, alternative='greater')

# –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
print(f"\nüü¢ –ì–∏–ø–æ—Ç–µ–∑–∞ 4. –ñ–µ–Ω—â–∏–Ω—ã —Å–æ–≤–µ—Ä—à–∞—é—Ç –ø–æ–∫—É–ø–∫–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –±–æ–ª—å—à—É—é —Å—É–º–º—É, —á–µ–º –º—É–∂—á–∏–Ω—ã:")
print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã t-—Ç–µ—Å—Ç–∞:")
print(f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ —É –º—É–∂—á–∏–Ω: {male_total_price.mean():.2f}")
print(f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ —É –∂–µ–Ω—â–∏–Ω: {female_total_price.mean():.2f}")
print(f"p-value = {test_result.pvalue:.5f}")

# –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥—ã
if test_result.pvalue < 0.05:
    print("‚úÖ –û–¢–í–ï–†–ì–ê–ï–ú H‚ÇÄ: –ñ–µ–Ω—â–∏–Ω—ã —Ç—Ä–∞—Ç—è—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º –±–æ–ª—å—à–µ, —á–µ–º –º—É–∂—á–∏–Ω—ã")
else:
    print("‚ùå –ù–ï –û–¢–í–ï–†–ì–ê–ï–ú H‚ÇÄ: –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ä–µ–¥–Ω–µ–º —á–µ–∫–µ –º–µ–∂–¥—É –º—É–∂—á–∏–Ω–∞–º–∏ –∏ –∂–µ–Ω—â–∏–Ω–∞–º–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–π")

# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
plt.figure(figsize=(8, 5))
sns.boxplot(data=df, x="gender", y="total_price", palette=["#ffcc99", "#99ccff"])
plt.title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ –º—É–∂—á–∏–Ω –∏ –∂–µ–Ω—â–∏–Ω")
plt.xlabel("–ü–æ–ª")
plt.ylabel("–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ RUB")
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.show()

# 25. ABC-–∞–Ω–∞–ª–∏–∑
print("\nüü¢ ABC-–∞–Ω–∞–ª–∏–∑:")
# –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ: —Å—á–∏—Ç–∞–µ–º –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ –Ω–∞ —Ç–æ–≤–∞—Ä
sales_by_product = df.groupby("product_id").agg(
    revenue=("total_price", "sum"),  # –æ–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
    total_sold=("quantity", "sum")   # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
).reset_index()

# —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—ã—Ä—É—á–∫–∏
sales_by_product = sales_by_product.sort_values("revenue", ascending=False)

# –≤—ã–≤–æ–¥–∏–º —Ç–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤
print(sales_by_product.head())

# —Å—á–∏—Ç–∞–µ–º –∫—É–º—É–ª—è—Ç–∏–≤–Ω—É—é –≤—ã—Ä—É—á–∫—É
sales_by_product["cum_revenue"] = sales_by_product["revenue"].cumsum()

# —Å—á–∏—Ç–∞–µ–º –¥–æ–ª—é –æ—Ç –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–∏
total_revenue = sales_by_product["revenue"].sum()
sales_by_product["cum_revenue_pct"] = sales_by_product["cum_revenue"] / total_revenue

def assign_abc_category(cum_pct):
    if cum_pct <= 0.80:
        return "A"  # 80% –≤—ã—Ä—É—á–∫–∏ = —Ç–æ–ø-20% —Ç–æ–≤–∞—Ä–æ–≤
    elif cum_pct <= 0.95:
        return "B"  # 15% –≤—ã—Ä—É—á–∫–∏ = —Å—Ä–µ–¥–Ω–∏–µ 30%
    else:
        return "C"  # 5% –≤—ã—Ä—É—á–∫–∏ = –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50%

sales_by_product["ABC_category"] = sales_by_product["cum_revenue_pct"].apply(assign_abc_category)

# –≤—ã–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –≥—Ä—É–ø–ø—ã A (–∫–ª—é—á–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã)
print("\nüëç –¢–æ–≤–∞—Ä—ã –≥—Ä—É–ø–ø—ã A (–∫–ª—é—á–µ–≤—ã–µ):")
print(sales_by_product[sales_by_product["ABC_category"] == "A"])

# –≤—ã–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –≥—Ä—É–ø–ø—ã C (–º–∞–ª–æ–≤–∞–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã)
print("\nüëé–¢–æ–≤–∞—Ä—ã –≥—Ä—É–ø–ø—ã C (–º–∞–ª–æ–≤–∞–∂–Ω—ã–µ):")
print(sales_by_product[sales_by_product["ABC_category"] == "C"])

# —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–≤–∞—Ä–æ–≤
low_sales_filter = (
    (sales_by_product["revenue"] < 10_000) &
    (sales_by_product["total_sold"] < 20) &
    (sales_by_product["cum_revenue_pct"] < 0.001)
)

# –≤—ã–≤–æ–¥–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞
to_remove = sales_by_product[low_sales_filter]
print("\nüî¥ –¢–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞:")
print(to_remove)

# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ABC
colors = {'A': '#66b3ff', 'B': '#ffcc99', 'C': '#ff6666'}
plt.figure(figsize=(10, 6))
sns.countplot(data=sales_by_product, x="ABC_category", palette=colors.values())
plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ ABC-–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
plt.xlabel("ABC-–∫–∞—Ç–µ–≥–æ—Ä–∏—è")
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤")
plt.show()

# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –≤—ã—Ä—É—á–∫–∏
plt.figure(figsize=(12, 6))
sns.lineplot(x=range(len(sales_by_product)), y=sales_by_product["cum_revenue_pct"], color="blue", label="–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞")
plt.axhline(y=0.80, color="green", linestyle="--", label="–ì—Ä–∞–Ω–∏—Ü–∞ A (80%)")
plt.axhline(y=0.95, color="orange", linestyle="--", label="–ì—Ä–∞–Ω–∏—Ü–∞ B (95%)")
plt.title("–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (ABC-–∞–Ω–∞–ª–∏–∑)")
plt.xlabel("–¢–æ–≤–∞—Ä—ã (—É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—ã—Ä—É—á–∫–∏)")
plt.ylabel("–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ–ª—è –≤—ã—Ä—É—á–∫–∏")
plt.legend()
plt.show()

# –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
if not to_remove.empty:
    plt.figure(figsize=(10, 6))
    sns.barplot(y=to_remove["product_id"], x=to_remove["revenue"], color="red")
    plt.title("–¢–æ–≤–∞—Ä—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: –ù–∏–∑–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –≤—ã—Ä—É—á–∫–∞")
    plt.xlabel("–í—ã—Ä—É—á–∫–∞")
    plt.ylabel("ID —Ç–æ–≤–∞—Ä–∞")
    plt.show()
